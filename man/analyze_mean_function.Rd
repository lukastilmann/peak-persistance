% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyze_mean_function.R
\name{analyze_mean_function}
\alias{analyze_mean_function}
\title{Analyze the Mean Function of Functional Data}
\usage{
analyze_mean_function(curves)
}
\arguments{
\item{curves}{A \code{tfd} or \code{tfb} object representing a collection of functional
data curves. Must inherit from the \code{tf} class in the tidyfun package.}
}
\value{
A list containing:
\item{peaks}{Numeric vector with the locations (x-coordinates) of peaks in the mean function}
\item{valleys}{Numeric vector with the locations (x-coordinates) of valleys in the mean function}
\item{function_mean}{The mean function as a tidyfun object}
\item{peak_heights}{Numeric vector with the heights (y-coordinates) of peaks}
\item{peak_curvatures}{Numeric vector with normalized curvatures at peaks (between 0 and 1)}
}
\description{
This function computes the mean of a collection of functional data objects and
analyzes its key features including peaks (local maxima), valleys (local minima),
peak heights, and peak curvatures. It uses derivatives to identify critical points
and characterize the shape of the mean function.
}
\details{
The function identifies peaks and valleys by examining where the first derivative
changes sign. Peaks occur when the slope changes from positive to negative, and valleys
occur when the slope changes from negative to positive. The curvature at peaks is
calculated using the negative of the second derivative and is normalized to have a
maximum value of 1. Negative curvatures (which shouldn't occur at true peaks) are
set to zero.
}
\note{
Peak locations near the boundaries of the function domain may be excluded when
calculating curvature due to limitations in derivative calculations at boundaries.
}
\examples{
\dontrun{
library(tidyfun)
# Create a sample tidyfun dataset
x <- seq(0, 1, length.out = 100)
curves_data <- replicate(10, sin(2 * pi * x + rnorm(1, 0, 0.2)))
curves <- tf_spline(curves_data, arg = x)

# Analyze the mean function
results <- analyze_mean_function(curves)

# Plot the mean function and mark peaks
plot(results$function_mean)
points(results$peaks, results$peak_heights, col = "red", pch = 16)
}

}
